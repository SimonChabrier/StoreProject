{# {% extends 'base.html.twig' %} #}
{# {% block content %} #}

{# searchForm #}
<div class="form-container">
{# <label for="minprice">Prix Minimum</label>
    <input type="number" name="min" id="min" class="form-control">
<label for="maximum">Prix Maximum</label>
    <input type="number" name="max" id="max" class="form-control"> #}


<label for="minprice">Prix minimum : <span id="minprice"></span></label>
    <input type="range" name="min" id="min" min="0" max="1000" class="range">
    <label for="maxprice">Prix maximum : <span id="maxprice"></span></label>
    <input type="range" name="max" id="max" min="0" max="1000" class="range">

    <div class="range-values">
      <span id="minOutput"></span> € - <span id="maxOutput"></span> €
    </div>

<label for="text">Rechercher Nom</label>
    <input type="text" name="text" id="text" class="form-control">
<hr>
    <div class="brandCheckboxes">
        <h5><i class="bi bi-list-check"></i> Marques</h5>
        <ol>
        {% for brand in brands.getBrands() %}
            <li><input type="checkbox" name="brand" value="{{ brand.name }}" class="brandCheckbox"> {{ brand.name }}</li>
        {% endfor %}
        </ol>
    </div>
</div>

{# {% endblock %} #}
{% block javascript %}

{# search script #}

<script>

console.log('search script loaded');
// domcontentloaded

document.addEventListener('DOMContentLoaded', function(){

const minPriceInput = document.getElementById("min");
const maxPriceInput = document.getElementById("max");
const searchInput = document.getElementById("text");
const brandCheckboxes = document.querySelectorAll(".brandCheckbox");

// Écoute des événements de saisie dans le formulaire
minPriceInput.addEventListener("input", filterProducts, false);
maxPriceInput.addEventListener("input", filterProducts);
searchInput.addEventListener("input", filterProducts);
brandCheckboxes.forEach((checkbox) => checkbox.addEventListener("change", filterProducts));

// Mise à jour de la valeur de sortie en fonction de la valeur du range
minOutput.innerHTML = minPriceInput.value;
minOutput.style.fontSize = 'smaller';
maxOutput.innerHTML = maxPriceInput.value;
maxOutput.style.fontSize = 'smaller';

// Gestionnaire d'événements pour mettre à jour la valeur de sortie lorsque la valeur du range est modifiée
minPriceInput.addEventListener('input', function() {
  minOutput.innerHTML = this.value;
});

maxPriceInput.addEventListener('input', function() {
  maxOutput.innerHTML = this.value;
});

const URI = window.location.origin;
//const search = document.getElementById('search')

let products = [];

fetch(`${URI}/json/product.json`)
    .then(function(response){
        return response.json();
    })
    .then(function(data){
        // populate data array with the json data
        data.forEach(function(product){
            product.sellingPrice = Number(product.sellingPrice); 
            product.sellingPrice = Math.trunc(product.sellingPrice);
            products.push(product);
        }); 
    });




// Fonction de filtrage
function filterProducts() {

    // Récupération des valeurs saisies dans le formulaire
    const minPrice = Number(minPriceInput.value);
    const maxPrice = Number(maxPriceInput.value);
    const searchTerm = searchInput.value.toLowerCase();
    const selectedBrands = Array.from(brandCheckboxes).filter((checkbox) => checkbox.checked).map((checkbox) => checkbox.value);
    console.log(selectedBrands);
    // Filtrage des produits en fonction des critères on va toggle true ou false pour chaque critère de recherche et on va utiliser ces valeurs pour évaluer si on utilise ou non chaque critère de recherche dans le filtre
    let searchState = {
        minPrice: false,
        maxPrice: false,
        searchTerm: false,
        brandIsSelected: false
    }
    // on met à jour les valeurs de searchState en fonction des critères de recherche utilisés
    if(minPriceInput.value){
        searchState.minPrice = true;
    }
    if(maxPriceInput.value){
        searchState.maxPrice = true;
    }
    if(searchInput.value != '' && searchInput.value.length >= 3){
        searchState.searchTerm = true;
    }
    if(selectedBrands.length > 0){
        searchState.brandIsSelected = true;
    }

    console.log(searchState);

    // si aucun critère de recherche n'est utilisé on affiche tous les produits
    if(!searchState.minPrice && !searchState.maxPrice && !searchState.searchTerm && !searchState.brandIsSelected){
        resetDivResults();
        return;
    }
    // si j'ai au moins un critère de recherche alors je filtre les produits par rapport à ce critère
    if(searchState.minPrice || searchState.maxPrice || searchState.searchTerm || searchState.brandIsSelected){
        
        let filteredProducts = products.filter(function(product){
            
            let minPriceFilter = true;
            let maxPriceFilter = true;
            let searchTermFilter = true;
            let selectedBrandsFilter = true;
            
            if(searchState.minPrice){
                minPriceFilter = product.sellingPrice >= minPrice;
            }
            if(searchState.maxPrice){
                maxPriceFilter = product.sellingPrice <= maxPrice;
            }
            if(searchState.searchTerm){
                searchTermFilter = product.name.toLowerCase().includes(searchTerm);
            }
            if(searchState.brandIsSelected){
                selectedBrandsFilter = selectedBrands.includes(product.brand.name);
            }
            return minPriceFilter && maxPriceFilter && searchTermFilter && selectedBrandsFilter;
        });
    console.log(filteredProducts);
        createProductCard(filteredProducts);
    }
}

function noResult($searchResults){
    // if there are no results to display in the searchResults div then display a message
    if($searchResults.innerHTML == ''){
        swal("Oupsss !",  `Pas de résultat pour la recherche : ${min.value} ${max.value} ${text.value} `, "error", {
        button: "Ok",
    });
    }
    // stop the function
    return;
}

function createProductCard(product){
    let searchResults = document.getElementById('searchResults');
    // create a div for each product
    resetDivResults();
    for(let i = 0; i < product.length; i++){
        let div = document.createElement('div');
        //div.classList.add('section');
        div.innerHTML = `
        <section>
            <h6>${product[i].name}</h6>
            <img class="last-five-picture" src="https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/acc1f836e10a4c1191dbae2801556d8d_9366/Chaussure_Ultraboost_5_DNA_Running_Sportswear_Lifestyle_Blanc_GV8747_01_standard.jpg" alt="">
            <span class="catalog-price"><del>${product[i].catalogPrice} €</del></span>
            <span class="selling-price">${product[i].sellingPrice} €</span>
            <div class="productInfo">
                <span class="categorie">Categorie : ${product[i].category.name}</span>
                <span class="sous-categorie">Sous-categorie : ${product[i].subCategory.name}</span>
                <span class="sous-categorie">Marque : ${product[i].brand.name}</span>
                <span class="type">Type : ${product[i].productType.name}</span>
            </div>
            <div class="productInfoFooter">
                                        <span>-9%</span> 
                <span class="productLink"><a href="/product/${product[i].id}">Détail</a></span>
            </div>
        </section>
        `;
        searchResults.appendChild(div);
    };
}

function resetDivResults(){
    let searchResults = document.getElementById('searchResults');
    searchResults.innerHTML = '';
}

// reset search results
document.getElementById('reset').addEventListener('click', function(){
    let searchResults = document.getElementById('searchResults');
    searchResults.innerHTML = '';
    min.value = 500;
    minOutput.innerHTML = min.value;
    max.value = 500;
    maxOutput.innerHTML = max.value;
    text.value = '';
    document.querySelectorAll('input[type="checkbox"]').forEach(function(checkbox){
        checkbox.checked = false;
    });
});

});

</script>

{% endblock %}


