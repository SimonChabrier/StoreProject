# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    picDir: '%kernel.project_dir%/public/uploads/files/pictures'
    docDir: '%kernel.project_dir%/public/uploads/files/documents'

    pictureXSDir:  '%kernel.project_dir%/public/uploads/files/pictures_XS'
    picture250Dir:  '%kernel.project_dir%/public/uploads/files/pictures_250'
    picture400Dir:  '%kernel.project_dir%/public/uploads/files/pictures_400'
    picture800Dir:  '%kernel.project_dir%/public/uploads/files/pictures_800'
    picture1200Dir: '%kernel.project_dir%/public/uploads/files/pictures_1200'
    slider1280Dir:  '%kernel.project_dir%/public/uploads/files/slider_1280'
    cache_ttl: 3600


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # activé pour les tests unitaires mettre à false en prod
                            # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

        bind:
            $projectDir: '%kernel.project_dir%'
            $picDir:      '%picDir%'
            $docDir:      '%docDir%'
            $pictureXSDir:  '%pictureXSDir%'
            $picture250Dir:  '%picture250Dir%'
            $picture400Dir:  '%picture400Dir%'
            $picture800Dir:  '%picture800Dir%'
            $picture1200Dir: '%picture1200Dir%'
            $slider1280Dir:  '%slider1280Dir%'
        
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # SearchFormService
    # App\Service\SearchFormService:
    #     arguments: ['@form.factory']  
    # Mail Service    
    App\Service\EmailService:
       arguments: ['@messenger.default_bus']
    # Messenger
    # App\Message\EmailNotification:
    #     arguments: ['@messenger.default_bus']
    App\Service\UploadService:
        arguments: ['@kernel', '%picDir%', '%docDir%']
    App\Service\ResizerService:
        arguments: ['%pictureXSDir%','%picture250Dir%', '%picture400Dir%', '%picture1200Dir%', '%slider1280Dir%']
    App\Message\UpdateFileMessage:
        arguments: ['%file', '%pictureObject']  

# DECLARER ICI LES LISTENER
    # Eg:
    # App\EventListener\PictureListener:
    #     tags:
    #         - { name: doctrine.event_listener, event: prePersist }

# DECLARER ICI LES SUBSCRIBER      
    App\EventSubscriber\Workflow\PictureWorkflowSubscriber:
        tags:
            - { name: kernel.event_subscriber }
    App\EventSubscriber\EasyAdmin\EasyAdminProductSubscriber:
        tags:
            - { name: kernel.event_subscriber }
    App\EventSubscriber\Kernel\JsonSubscriber:
        tags:
            - { name: kernel.event_subscriber }
    App\EventSubscriber\Cache\ClearCacheSubscriber:
        tags:
            - { name: doctrine.event_subscriber }
    App\EventSubscriber\Cache\MessageProcessedSubscriber:
        tags:
            - { name: messenger.event_subscriber }  
    
